[profile.default]
# 源目录
src = 'src'
# 测试目录
test = 'test'
# 脚本目录
script = 'script'
# 构件目录
out = 'out'
# 搜索库的路径列表
libs = ['lib']
# 重映射列表
remappings = []
# 是否通过递归扫描 `libs` 文件夹自动检测重映射
auto_detect_remappings = true
# 要链接的已部署库列表
libraries = []
# 是否缓存构建
cache = true
# 如果启用，缓存目录
cache_path = 'cache'
# 广播日志存储位置
broadcast = 'broadcast'
# 额外的 solc 允许路径
allow_paths = []
# 额外的 solc 包含路径
include_paths = []
# 是否忽略缓存
force = false
# EVM 的版本，通过硬分叉名称指定
evm_version = 'london'
# 要输出 gas 报告的合约列表
gas_reports = ['*']
# 要忽略 gas 报告的合约列表
gas_reports_ignore = []
# 覆盖 Solidity 版本（这将覆盖 `auto_detect_solc`）
#solc_version = '0.8.10'
# Forge 是否应自动检测要使用的 solc 版本
auto_detect_solc = true
# 禁止下载丢失的 solc 版本
offline = false
# 启用或禁用优化器
optimizer = true
# 优化器运行次数
optimizer_runs = 200
# 测试的详细程度
verbosity = 0
# 忽略的 solc 错误代码列表
ignored_error_codes = [1878, 5574]
# 合约构建警告是否会导致编译失败
deny_warnings = false
# 配置触及文件系统的作弊代码的权限
fs_permissions = []
# 是否生成额外的构建信息文件
build_info = false
# 是否启用 `vm.ffi`
ffi = false
# 测试中 `msg.sender` 的地址
sender = '0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38'
# 测试中 `tx.origin` 的地址
tx_origin = '0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38'
# 测试合约的初始余额
initial_balance = '0xffffffffffffffffffffffff'
# 测试中所处的链 ID
chain_id = 31337
# EVM 执行期间的 `block.number` 值
block_number = 1
# 测试中的 gas 限制
gas_limit = 9223372036854775807
# 测试中的 gas 价格（以 wei 为单位）
gas_price = 0
# 测试中的块基本费率（以 wei 为单位）
block_base_fee_per_gas = 0
# 测试中 `block.coinbase` 的地址
block_coinbase = '0x0000000000000000000000000000000000000000'
# 测试中的块时间戳
block_timestamp = 1
# 测试中的块难度
block_difficulty = 0
# EVM 的内存限制（默认为 32 MB）
memory_limit = 33554432
# 包含在合约构件中的额外输出
extra_output = []
# 写入单独文件的额外输出
extra_output_files = []
# 打印已编译合约的名称
names = false
# 打印已编译合约的大小
sizes = false
# 是否使用 Yul 中间表示编译流程
via_ir = false
# 启用或禁用分叉时的 RPC 缓存
no_storage_caching = false
# 使用给定的哈希方法为附加的元数据哈希
# 通过设置“none”可以从字节码中移除元数据哈希
bytecode_hash = "ipfs"
# 如何处理还原（和需求）原因字符串
revert_strings = "default"
# 如果启用，Solidity 编译器将被指示仅生成所需合约的字节码。这可以减少 `forge test` 的编译时间，但尚属实验性功能。
sparse_mode = false
# 包含可在测试期间访问的 RPC 端点的别名 -> URL|Env 对
rpc_endpoints = { optimism = "https://optimism.alchemyapi.io/v2/...", mainnet = "${RPC_MAINNET}" }
# 要使用的 Solc 实例。
# 这优先于 `auto_detect_solc`，如果设置了版本，则会覆盖自动检测。
#solc = None
# 详细启用或停用优化器组件
#optimizer_details = None
# 模型检查设置。
#model_checker = None,
# 应用于任何 RPC 调用的 RPC 服务器的 URL
#eth_rpc_url = None
# Etherscan API 密钥
#etherscan_api_key = None
# 仅运行符合指定正则表达式模式的测试函数
#match_test = None
# 仅运行不符合指定正则表达式模式的测试函数
#no_match_test = None
# 仅运行符合指定正则表达式模式的合约中的测试
#match_contract = None
# 仅运行不符合指定正则表达式模式的合约中的测试
#no_match_contract = None
# 仅在符合指定 glob 模式的源文件中运行测试
#match_path = None
# 仅在不符合指定 glob 模式的源文件中运行测试
#no_match_path = None
# 仅对不符合指定正则表达式模式的文件显示覆盖率。
#no_match_coverage = None
# 使用的线程数量。未设置或为零指定逻辑核心的数量。
#threads = 0
# 是否显示测试执行进度
#show_progress = false
# 为状态分叉固定块号
#fork_block_number = None
# 块 gas 限制
#block_gas_limit = None
# `build-info` 目录的路径，该目录包含构建信息 json 文件
#build_info_path = None

[fmt]
# 格式化器尝试换行的最大行长度
line_length = 120
# 每个缩进级别的空格数
tab_width = 4
# 在括号之间打印空格
bracket_spacing = false
# uint/int256 类型的样式
int_types = "long"
# 如果函数参数为多行，则总是在单独的行上放置函数属性
func_attrs_with_params_multiline = true
# 引号样式
quote_style = "double"
# 数字文字中的下划线样式
number_underscore = "preserve"

[fuzz]
# 模糊测试的运行次数
runs = 256
# 使用 `vm.assume` 作弊代码期间允许 proptest 接受的最大测试用例拒绝次数。这将用于设置 proptest 测试运行器配置中的 `max_global_rejects` 值。
# `max_local_rejects` 选项没有在此公开，因为我们不使用 `prop_filter`。
max_test_rejects = 65536
# 字典的权重
dictionary_weight = 40
# 指示是否包含存储中的值的标志
include_storage = true
# 指示是否包含 push 字节值的标志
include_push_bytes = true

[invariant]
# 每个不变测试组必须执行的运行次数
runs = 256
# 一个运行中试图打破不变量的调用次数
depth = 15
# 如果发生还原，则使不变性模糊测试失败
fail_on_revert = false
# 允许在运行不变性测试时覆盖不安全的外部调用。例如：重入检查
call_override = false
# 字典的权重
dictionary_weight = 80
# 指示是否包含存储中的值的标志
include_storage = true
# 指示是否包含 push 字节值的标志
include_push_bytes = true